# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This file contains common system config stuff for the Android build.

declare_args() {
  android_ndk_root = "$external/android_tools/ndk"
  android_ndk_version = "r25b"
  android_ndk_major_version = 25

  android_sdk_root = "$external/android_tools/sdk"
  android_sdk_version = "24"
  android_sdk_build_tools_version = "24.0.2"

  lint_android_sdk_root = "$external/android_tools/sdk"
  lint_android_sdk_version = "24"

  # Libc++ library directory. Override to use a custom libc++ binary.
  android_libcpp_lib_dir = ""

  # Adds intrumentation to each function. Writes a file with the order that
  # functions are called at startup.
  use_order_profiling = false
}

# Host stuff -----------------------------------------------------------------

# Defines the name the Android build gives to the current host CPU
# architecture, which is different than the names GN uses.
if (host_cpu == "x64") {
  android_host_arch = "x86_64"
} else if (host_cpu == "x86") {
  android_host_arch = "x86"
} else {
  assert(false, "Need Android toolchain support for your build CPU arch.")
}

# Defines the name the Android build gives to the current host CPU
# architecture, which is different than the names GN uses.
if (host_os == "linux") {
  android_host_os = "linux"
} else if (host_os == "mac") {
  android_host_os = "darwin"
} else if (host_os == "win") {
  android_host_os = "windows"
} else {
  assert(false, "Need Android toolchain support for your build OS.")
}

# Directories and files ------------------------------------------------------
#
# We define may of the dirs strings here for each output architecture (rather
# than just the current one) since these are needed by the Android toolchain
# file to define toolchains for all possible targets in one pass.

android_sdk = "${android_sdk_root}/platforms/android-${android_sdk_version}"

# Path to the Android NDK and SDK.
android_ndk_include_dir = "$android_ndk_root/usr/include"

android_sdk_tools = "${android_sdk_root}/tools"
android_sdk_build_tools =
    "${android_sdk_root}/build-tools/$android_sdk_build_tools_version"

# Path to the SDK's android.jar
android_sdk_jar = "$android_sdk/android.jar"

zipalign_path = "$android_sdk_build_tools/zipalign"

# Subdirectories inside android_ndk_root that contain the sysroot for the
# associated platform.
# If you raise this, reevaluate the snprintf=snprintf in ./BUILD.gn.
android_sysroot_subdir = "toolchains/llvm/prebuilt/${android_host_os}-${android_host_arch}/sysroot"

# Toolchain root directory for each build. The actual binaries are inside
# a "bin" directory inside of these.
android_toolchain_root = "$android_ndk_root/toolchains/llvm/prebuilt/${android_host_os}-${android_host_arch}"

# Location of libgcc. This is only needed for the current GN toolchain, so we
# only need to define the current one, rather than one for every platform
# like the toolchain roots.
if (current_cpu == "x86") {
  android_prebuilt_arch = "android-x86"
  _binary_prefix = "i686-linux-android"
} else if (current_cpu == "arm") {
  android_prebuilt_arch = "android-arm"
  _binary_prefix = "arm-linux-androideabi"
} else if (current_cpu == "mipsel") {
  android_prebuilt_arch = "android-mips"
  _binary_prefix = "mipsel-linux-android"
} else if (current_cpu == "x64") {
  android_prebuilt_arch = "android-x86_64"
  _binary_prefix = "x86_64-linux-android"
} else if (current_cpu == "arm64") {
  android_prebuilt_arch = "android-arm64"
  _binary_prefix = "aarch64-linux-android"
} else if (current_cpu == "mips64el") {
  android_prebuilt_arch = "android-mips64"
  _binary_prefix = "mips64el-linux-android"
} else {
  assert(false, "Need android libgcc support for your target arch.")
}

# Toolchain stuff ------------------------------------------------------------

android_libcpp_root = "$android_ndk_root/sources/cxx-stl/llvm-libc++"

# ABI ------------------------------------------------------------------------

if (current_cpu == "x86") {
  android_app_abi = "x86"
} else if (current_cpu == "arm") {
  import("//build/config/arm.gni")
  if (arm_version < 7) {
    android_app_abi = "armeabi"
  } else {
    android_app_abi = "armeabi-v7a"
  }
} else if (current_cpu == "mipsel") {
  android_app_abi = "mips"
} else if (current_cpu == "x64") {
  android_app_abi = "x86_64"
} else if (current_cpu == "arm64") {
  android_app_abi = "arm64-v8a"
} else if (current_cpu == "mips64el") {
  android_app_abi = "mips64"
} else {
  assert(false, "Unknown Android ABI: " + current_cpu)
}

if (android_libcpp_lib_dir == "") {
  android_libcpp_lib_dir = "${android_libcpp_root}/libs/${android_app_abi}"
}

# Secondary ABI -------------------------------------------------------------
if (target_cpu == "arm64" || target_cpu == "x64" || target_cpu == "mips64el") {
  android_64bit_target_cpu = true
} else if (target_cpu == "arm" || target_cpu == "x86" ||
           target_cpu == "mipsel") {
  android_64bit_target_cpu = false
} else {
  assert(false, "Unknown target CPU: $target_cpu")
}

# Intentionally do not define android_app_secondary_abi_cpu and
# android_app_secondary_abi for 32-bit target_cpu, since they are not used.
if (target_cpu == "arm64") {
  android_secondary_abi_cpu = "arm"
  android_app_secondary_abi = "armeabi-v7a"
} else if (target_cpu == "x64") {
  android_secondary_abi_cpu = "x86"
  android_app_secondary_abi = "x86"
} else if (target_cpu == "mips64el") {
  android_secondary_abi_cpu = "mipsel"
  android_app_secondary_abi = "mips"
}

if (defined(android_secondary_abi_cpu)) {
  if (is_clang) {
    android_secondary_abi_toolchain =
        "//build/toolchain/android:android_clang_${android_secondary_abi_cpu}"
  } else {
    android_secondary_abi_toolchain =
        "//build/toolchain/android:android_${android_secondary_abi_cpu}"
  }
}
