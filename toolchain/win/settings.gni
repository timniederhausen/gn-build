if (is_clang) {
  import("//build/toolchain/clang.gni")
}

declare_args() {
  # Use the system install of Visual Studio
  use_visual_studio = true

  # Desired version of Visual Studio.
  # If visual_studio_path is set, this must be
  # the version of the VS installation at the visual_studio_path.
  #
  # Use "2013" for Visual Studio 2013 or "latest" for automatically
  # choosing the highest version (visual_studio_path must be unset in
  # this case).
  visual_studio_version = "latest"

  # The path of your MSVC installation.
  #
  # If this is set you must set visual_studio_version as well.
  # Autodetected based on visual_studio_version.
  visual_studio_path = ""

  # Windows SDK version to use.
  # Can either be a full Windows 10 SDK number (e.g. 10.0.10240.0),
  # "8.1" for the Windows 8.1 SDK or "default" to use the VS default version.
  windows_sdk_version = "default"

  # Microsoft compiler version number clang-cl will report in _MSC_VER
  # (Defaults to the default version associated with the chosen VS version.)
  clang_msc_ver = 0

  # Allows us to avoid multiple toolchain.py invocations for multi-toolchain builds.
  cached_toolchain_data = ""

  visual_c_path = ""
  windows_sdk_path = ""
  netfx_sdk_path = ""
  netfx_sdk_version = ""
  clang_msc_full_ver = 0
}

assert(visual_studio_version != "", "visual_studio_version must be non-empty")
assert(visual_studio_path == "" || visual_studio_version != "latest",
       "You must set visual_studio_version if you set visual_studio_path")

if (is_clang) {
  _clang_base_path_arg = clang_base_path
  _clang_msc_ver = "" + clang_msc_ver
} else {
  _clang_base_path_arg = ""
  _clang_msc_ver = ""
}

if (host_os == "win") {
  clang_cl = "clang-cl.exe"
} else {
  clang_cl = "clang-cl"
}

if (visual_studio_path == "") {
  # can't pass empty args
  visual_studio_path = "default"
}

if (cached_toolchain_data != "") {
  toolchain_data = cached_toolchain_data
} else {
  if (use_visual_studio) {
    toolchain_data = exec_script("toolchain.py",
                                [
                                  "setup_toolchain",
                                  visual_studio_version,
                                  visual_studio_path,
                                  windows_sdk_version,

                                  # Don't use clang_base_path directly, so we can
                                  # skip clang detection if not needed
                                  # (i.e. !is_clang).
                                  _clang_base_path_arg,
                                  _clang_msc_ver,
                                ],
                                "scope")
  } else {
    # toolchain_data = read_file(rebase_path("//.msvc.toolchain"), "scope")
    toolchain_data = {
      msc_ver=clang_msc_ver
      msc_full_ver=clang_msc_full_ver
      x86 = {
        env_filename = ""
        vc_bin_dir = ""
        include_flags_I = "\"/I$visual_c_path/include\" \"/I$visual_c_path/atlmfc/include\" \"/I$visual_c_path/auxiliary/vs/include\" \"/I$windows_sdk_path/include/$windows_sdk_version/ucrt\" \"/I$windows_sdk_path/include/$windows_sdk_version/um\" \"/I$windows_sdk_path/include/$windows_sdk_version/shared\" \"/I$windows_sdk_path/include/$windows_sdk_version/winrt\" \"/I$windows_sdk_path/include/$windows_sdk_version/cppwinrt\" \"/I$netfx_sdk_path/$netfx_sdk_version/include/um\""
        include_flags_imsvc = "\"-imsvc$visual_c_path/include\" \"-imsvc$visual_c_path/atlmfc/include\" \"-imsvc$visual_c_path/auxiliary/vs/include\" \"-imsvc$windows_sdk_path/include/$windows_sdk_version/ucrt\" \"-imsvc$windows_sdk_path/include/$windows_sdk_version/um\" \"-imsvc$windows_sdk_path/include/$windows_sdk_version/shared\" \"-imsvc$windows_sdk_path/include/$windows_sdk_version/winrt\" \"-imsvc$windows_sdk_path/include/$windows_sdk_version/cppwinrt\" \"-imsvc$netfx_sdk_path/$netfx_sdk_version/include/um\""
        vc_lib_path = "$visual_c_path/lib/x86"
        vc_lib_atlmfc_path = "$visual_c_path/atlmfc/lib/x86"
        vc_lib_um_path = "$windows_sdk_path/lib/$windows_sdk_version/um/x86"
        paths = ""
        libpath_flags = "\"-libpath:$visual_c_path/atlmfc/lib/x86\" \"-libpath:$visual_c_path/lib/x86\" \"-libpath:$netfx_sdk_path/$netfx_sdk_version/lib/um/x86\" \"-libpath:$windows_sdk_path/lib/$windows_sdk_version/ucrt/x86\" \"-libpath:$windows_sdk_path/lib/$windows_sdk_version/um/x86\""
      }
      x86_uwp = {
        env_filename = ""
        vc_bin_dir = ""
        include_flags_I = "\"/I$visual_c_path/include\" \"/I$visual_c_path/atlmfc/include\" \"/I$visual_c_path/auxiliary/vs/include\" \"/I$windows_sdk_path/include/$windows_sdk_version/ucrt\" \"/I$windows_sdk_path/include/$windows_sdk_version/um\" \"/I$windows_sdk_path/include/$windows_sdk_version/shared\" \"/I$windows_sdk_path/include/$windows_sdk_version/winrt\" \"/I$windows_sdk_path/include/$windows_sdk_version/cppwinrt\" \"/I$netfx_sdk_path/$netfx_sdk_version/include/um\""
        include_flags_imsvc = "\"-imsvc$visual_c_path/include\" \"-imsvc$visual_c_path/atlmfc/include\" \"-imsvc$visual_c_path/auxiliary/vs/include\" \"-imsvc$windows_sdk_path/include/$windows_sdk_version/ucrt\" \"-imsvc$windows_sdk_path/include/$windows_sdk_version/um\" \"-imsvc$windows_sdk_path/include/$windows_sdk_version/shared\" \"-imsvc$windows_sdk_path/include/$windows_sdk_version/winrt\" \"-imsvc$windows_sdk_path/include/$windows_sdk_version/cppwinrt\" \"-imsvc$netfx_sdk_path/$netfx_sdk_version/include/um\""
        vc_lib_path = "$visual_c_path/lib/x86/store"
        vc_lib_um_path = "$windows_sdk_path/lib/$windows_sdk_version/um/x86"
        paths = ""
        libpath_flags = "\"-libpath:$visual_c_path/lib/x86/store/\" \"-libpath:$netfx_sdk_path/$netfx_sdk_version/lib/um/x86\" \"-libpath:$windows_sdk_path/lib/$windows_sdk_version/ucrt/x86\" \"-libpath:$windows_sdk_path/lib/$windows_sdk_version/um/x86\""
      }
      x64 = {
        env_filename = ""
        vc_bin_dir = ""
        include_flags_I = "\"/I$visual_c_path/include\" \"/I$visual_c_path/atlmfc/include\" \"/I$visual_c_path/auxiliary/vs/include\" \"/I$windows_sdk_path/include/$windows_sdk_version/ucrt\" \"/I$windows_sdk_path/include/$windows_sdk_version/um\" \"/I$windows_sdk_path/include/$windows_sdk_version/shared\" \"/I$windows_sdk_path/include/$windows_sdk_version/winrt\" \"/I$windows_sdk_path/include/$windows_sdk_version/cppwinrt\" \"/I$netfx_sdk_path/$netfx_sdk_version/include/um\""
        include_flags_imsvc = "\"-imsvc$visual_c_path/include\" \"-imsvc$visual_c_path/atlmfc/include\" \"-imsvc$visual_c_path/auxiliary/vs/include\" \"-imsvc$windows_sdk_path/include/$windows_sdk_version/ucrt\" \"-imsvc$windows_sdk_path/include/$windows_sdk_version/um\" \"-imsvc$windows_sdk_path/include/$windows_sdk_version/shared\" \"-imsvc$windows_sdk_path/include/$windows_sdk_version/winrt\" \"-imsvc$windows_sdk_path/include/$windows_sdk_version/cppwinrt\" \"-imsvc$netfx_sdk_path/$netfx_sdk_version/include/um\""
        vc_lib_path = "$visual_c_path/lib/x64"
        vc_lib_atlmfc_path = "$visual_c_path/atlmfc/lib/x64"
        vc_lib_um_path = "$windows_sdk_path/lib/$windows_sdk_version/um/x64"
        paths = ""
        libpath_flags = "\"-libpath:$visual_c_path/atlmfc/lib/x64\" \"-libpath:$visual_c_path/lib/x64\" \"-libpath:$netfx_sdk_path/$netfx_sdk_version/lib/um/x64\" \"-libpath:$windows_sdk_path/lib/$windows_sdk_version/ucrt/x64\" \"-libpath:$windows_sdk_path/lib/$windows_sdk_version/um/x64\""
      }
      x64_uwp = {
        env_filename = ""
        vc_bin_dir = ""
        include_flags_I = "\"/I$visual_c_path/include\" \"/I$visual_c_path/atlmfc/include\" \"/I$visual_c_path/auxiliary/vs/include\" \"/I$windows_sdk_path/include/$windows_sdk_version/ucrt\" \"/I$windows_sdk_path/include/$windows_sdk_version/um\" \"/I$windows_sdk_path/include/$windows_sdk_version/shared\" \"/I$windows_sdk_path/include/$windows_sdk_version/winrt\" \"/I$windows_sdk_path/include/$windows_sdk_version/cppwinrt\" \"/I$netfx_sdk_path/$netfx_sdk_version/include/um\""
        include_flags_imsvc = "\"-imsvc$visual_c_path/include\" \"-imsvc$visual_c_path/atlmfc/include\" \"-imsvc$visual_c_path/auxiliary/vs/include\" \"-imsvc$windows_sdk_path/include/$windows_sdk_version/ucrt\" \"-imsvc$windows_sdk_path/include/$windows_sdk_version/um\" \"-imsvc$windows_sdk_path/include/$windows_sdk_version/shared\" \"-imsvc$windows_sdk_path/include/$windows_sdk_version/winrt\" \"-imsvc$windows_sdk_path/include/$windows_sdk_version/cppwinrt\" \"-imsvc$netfx_sdk_path/$netfx_sdk_version/include/um\""
        vc_lib_path = "$visual_c_path/lib/x64/store"
        vc_lib_um_path = "$windows_sdk_path/lib/$windows_sdk_version/um/x64"
        paths = ""
        libpath_flags = "\"-libpath:$visual_c_path/lib/x64/store/\" \"-libpath:$netfx_sdk_path/$netfx_sdk_version/lib/um/x64\" \"-libpath:$windows_sdk_path/lib/$windows_sdk_version/ucrt/x64\" \"-libpath:$windows_sdk_path/lib/$windows_sdk_version/um/x64\""
      }
    }
  }
}

# Value of the _MSC_VER variable.
# see: https://msdn.microsoft.com/en-us/library/b0084kay.aspx
msc_ver = toolchain_data.msc_ver

# Value of the _MSC_FULL_VER variable.
# see: https://msdn.microsoft.com/en-us/library/b0084kay.aspx
msc_full_ver = toolchain_data.msc_full_ver

if (defined(toolchain_data.clang_version)) {
  win_clang_version = toolchain_data.clang_version
} else {
  win_clang_version = 0
}

# current_toolchain_data: Settings specific to current_os/current_cpu
if (current_os == "win") {
  if (current_cpu == "x86") {
    assert(defined(toolchain_data.x86))
    current_toolchain_data = toolchain_data.x86
  } else if (current_cpu == "x64") {
    assert(defined(toolchain_data.x64))
    current_toolchain_data = toolchain_data.x64
  } else if (current_cpu == "arm") {
    assert(defined(toolchain_data.arm))
    current_toolchain_data = toolchain_data.arm
  } else if (current_cpu == "arm64") {
    assert(defined(toolchain_data.arm64))
    current_toolchain_data = toolchain_data.arm64
  }
} else if (current_os == "winuwp") {
  if (current_cpu == "x86") {
    assert(defined(toolchain_data.x86_uwp))
    current_toolchain_data = toolchain_data.x86_uwp
  } else if (current_cpu == "x64") {
    assert(defined(toolchain_data.x64_uwp))
    current_toolchain_data = toolchain_data.x64_uwp
  } else if (current_cpu == "arm") {
    assert(defined(toolchain_data.arm_uwp))
    current_toolchain_data = toolchain_data.arm_uwp
  } else if (current_cpu == "arm64") {
    assert(defined(toolchain_data.arm64_uwp))
    current_toolchain_data = toolchain_data.arm64_uwp
  }
}
