# Copyright 2015 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("$gn_build_dir/toolchain/toolchain.gni")

# Bring all the windows toolchain definitions in.
# Officially msc_ver etc. live here, but they're actually defined
# in win/settings.gni.
if (is_win) {
  import("$gn_build_dir/toolchain/win/settings.gni")
}

# Defines compiler versions for compilers used by multiple toolchains.

# TODO(tim): Disable gcc_version on Windows?
declare_args() {
  # Version of the GCC compiler.
  # Auto-detection is toolchain-specific and happens only if GCC is the active
  # compiler.
  # Format: MAJOR * 10000 + MINOR * 100 + PATCHLEVEL
  gcc_version = 0

  # Version of the Clang compiler.
  # Auto-detection is toolchain-specific and happens only if Clang is the
  # active compiler.
  # Format: MAJOR * 10000 + MINOR * 100 + PATCHLEVEL
  clang_version = 0
}

# If the user didn't specify the compiler version, attempt to autodetect it.

if (gcc_version == 0 && !is_clang && !is_win) {
  if (is_android) {
    # sync with $gn_build_dir/toolchain/android/BUILD.gn
    import("$gn_build_dir/toolchain/android/settings.gni")
    _exe = "${android_tool_prefix}gcc"
  } else if (is_posix) {
    import("$gn_build_dir/toolchain/posix/settings.gni")
    _exe = gcc_cc
  } else {
    assert(false, "GCC isn't supported on this platform")
  }
  gcc_version = exec_script("posix/toolchain.py",
                            [
                              "get_gcc_version",
                              _exe,
                            ],
                            "trim value")
}

if (clang_version == 0 && is_clang && !is_win) {
  if (is_android) {
    # sync with $gn_build_dir/toolchain/android/BUILD.gn
    import("$gn_build_dir/toolchain/clang.gni")
    _exe = "$clang_base_path/bin/clang"
  } else if (is_posix) {
    import("$gn_build_dir/toolchain/posix/settings.gni")
    _exe = clang_cc
  } else {
    assert(false, "GCC isn't supported on this platform")
  }
  clang_version = exec_script("posix/toolchain.py",
                              [
                                "get_clang_version",
                                _exe,
                              ],
                              "trim value")
} else if (clang_version == 0 && is_clang) {
  clang_version = win_clang_version
}
