import("$gn_root/toolchain/sysroot.gni")

assert(is_posix)

# This is included by reference in the $gn_root/config/compiler config that
# is applied to all targets. It is here to separate out the logic that is
# Posix-only.
config("compiler") {
  cflags = []
  ldflags = []
  if (is_freebsd && is_clang) {
    # GCC seems to include /usr/local/include in its default include dirs.
    cflags += [ "-isystem/usr/local/include" ]
    ldflags += [ "-B/usr/local/bin" ]
  }
}

# This is included by reference in the $gn_root/config/compiler:runtime_library
# config that is applied to all targets. It is here to separate out the logic
# that is Posix-only. Please see that target for advice on what should go in
# :runtime_library vs. :compiler.
config("runtime_library") {
  if (!is_mac && sysroot != "") {
    # Pass the sysroot to all C compiler variants, the assembler, and linker.
    cflags = [ "--sysroot=" + rebase_path(sysroot, root_build_dir) ]
    asmflags = cflags
    ldflags = cflags

    # TODO: Need to get some linker flags out of the sysroot.
  }
}

# Settings for executables.
config("executable_ldconfig") {
  # Find the path containing shared libraries for this toolchain
  # relative to the build directory. ${root_out_dir} will be a
  # subdirectory of ${root_build_dir} when cross compiling.
  rpath_link = rebase_path(root_out_dir, root_build_dir)

  ldflags = [
    # Want to pass "\$". GN will re-escape as required for ninja.
    "-Wl,-rpath=\$ORIGIN",
    "-Wl,-rpath-link=${rpath_link}",

    # Newer binutils don't set DT_RPATH unless you disable "new" dtags
    # and the new DT_RUNPATH doesn't work without --no-as-needed flag.
    "-Wl,--disable-new-dtags",
  ]

  if (current_cpu == "mipsel") {
    ldflags += [ "-pie" ]
  }
}
